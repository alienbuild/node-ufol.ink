{"version":3,"sources":["components/Redirect.js","App.js","serviceWorker.js","index.js"],"names":["Redirect","state","redirectURL","_this2","this","hash","props","match","params","axios","get","headers","then","res","console","log","data","url","window","location","replace","catch","err","setState","react_default","a","createElement","Component","App","link","handleChange","e","_this","target","value","handleSubmit","preventDefault","validator","isURL","require_protocol","post","concat","error","alert","copyResult","BrowserRouter","className","Route","path","exact","render","onSubmit","type","name","placeholder","onChange","id","onClick","component","Boolean","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gQA0CeA,6MApCXC,MAAQ,CACJC,YAAa,uFAGG,IAAAC,EAAAC,KACVC,EAAOD,KAAKE,MAAMC,MAAMC,OAAOH,KAErCI,IAAMC,IAAI,gBAAgB,CACtBC,QAAS,CACLN,UAGPO,KAAK,SAAAC,GACFC,QAAQC,IAAIF,EAAIG,MACZH,EAAIG,KAAKC,KACTC,OAAOC,SAASC,QAAQP,EAAIG,KAAKC,OAIxCI,MAAM,SAAAC,GACHnB,EAAKoB,SAAS,CACVrB,YAAa,qDAOrB,OACIsB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAItB,KAAKH,MAAMC,qBAjCRyB,aCwFRC,qNAlFX3B,MAAQ,CACJgB,IAAK,GACLY,KAAM,MAGVC,aAAe,SAACC,GACdC,EAAKT,SAAS,CACVN,IAAKc,EAAEE,OAAOC,WAIpBC,aAAe,SAACJ,GACZA,EAAEK,iBACeC,IAAUC,MAAMN,EAAK/B,MAAMgB,IAAK,CAC7CsB,kBAAkB,KAKlBzB,QAAQC,IAAI,WAAYiB,EAAK/B,MAAMgB,KAEnCR,IAAM+B,KAAK,eAAgB,CACvBvB,IAAKe,EAAK/B,MAAMgB,MAEfL,KAAK,SAAAC,GACFmB,EAAKT,SAAS,CACVM,KAAI,mBAAAY,OAAqB5B,EAAIG,KAAKX,UAGzCgB,MAAM,SAAUqB,GACb5B,QAAQC,IAAI2B,MAbpBC,MAAM,0EAkBdC,WAAa,SAACb,GACVA,EAAEK,iBACFO,MAAM,2HAaH,IAAAxC,EAAAC,KACP,OACIoB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACErB,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,aACXtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAC1B1B,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,aACXtB,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,QAAMoB,UAAU,aAAhB,OAAJ,IAA2CtB,EAAAC,EAAAC,cAAA,QAAMoB,UAAU,aAAhB,KAA3C,OACAtB,EAAAC,EAAAC,cAAA,6CAEJF,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,QAAMyB,SAAUhD,EAAKgC,cACjBX,EAAAC,EAAAC,cAAA,gBACIF,EAAAC,EAAAC,cAAA,SAAO0B,KAAK,OAAOC,KAAK,MAAMC,YAAY,2CAA2CC,SAAUpD,EAAK2B,eACpGN,EAAAC,EAAAC,cAAA,SAAO0B,KAAK,SAASlB,MAAM,aAE/BV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,YAAUoB,UAA+B,KAApB3C,EAAKF,MAAM4B,KAAc,iBAAmB,eAC7DL,EAAAC,EAAAC,cAAA,QAAM8B,GAAG,UAAWrD,EAAKF,MAAM4B,MAC/BL,EAAAC,EAAAC,cAAA,UAAQ8B,GAAG,OAAOC,QAAStD,EAAKyC,oBAMpDpB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,KAAK,SAASU,UAAW1D,EAAUiD,OAAK,aA7E3CtB,cCKEgC,QACW,cAA7BzC,OAAOC,SAASyC,UAEe,UAA7B1C,OAAOC,SAASyC,UAEhB1C,OAAOC,SAASyC,SAASrD,MACvB,2DCZNsD,IAASX,OAAO1B,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC","file":"static/js/main.8a12690d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from \"axios\";\r\n\r\nclass Redirect extends Component {\r\n\r\n    // Init state\r\n    state = {\r\n        redirectURL: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        const hash = this.props.match.params.hash;\r\n\r\n        axios.get('/api/redirect',{\r\n            headers: {\r\n                hash\r\n            }\r\n        })\r\n        .then(res => {\r\n            console.log(res.data);\r\n            if (res.data.url) {\r\n                window.location.replace(res.data.url);\r\n            }\r\n\r\n        })\r\n        .catch(err => {\r\n            this.setState({\r\n                redirectURL: 'URL Not found'\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>{this.state.redirectURL}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Redirect;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport axios from 'axios';\nimport validator from 'validator';\nimport Redirect from './components/Redirect';\nimport './aliens.css';\n\nclass App extends Component {\n\n    state = {\n        url: '',\n        link: ''\n    };\n\n    handleChange = (e) => {\n      this.setState({\n          url: e.target.value\n      })\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const validURL = validator.isURL(this.state.url, {\n            require_protocol: true\n        });\n        if (!validURL) {\n            alert('Please ensure the url is correct and includes the http(s) protocol.');\n        } else{\n            console.log('URL is: ', this.state.url);\n            // Post values\n            axios.post('/api/shorten', {\n                url: this.state.url\n            })\n                .then(res => {\n                    this.setState({\n                        link: `http://ufol.ink/${res.data.hash}`\n                    })\n                })\n                .catch(function (error) {\n                    console.log(error);\n                });\n        }\n    };\n\n    copyResult = (e) => {\n        e.preventDefault();\n        alert('Sorry, copy function is still in development..');\n      // let result = document.getElementById('result');\n      // result.focus();\n      // result.select();\n      //\n      // try{\n      //     const urlCopy = document.execCommand('copy');\n      //     console.log('Copied: ', urlCopy);\n      // } catch (err) {\n      //     console.log('Hmm...sorry, we weren\\'t able to copy the url for you');\n      // }\n    };\n\n  render() {\n    return (\n        <Router>\n          <div className=\"container\">\n              <Route path=\"/\" exact render={() => (\n                  <div className=\"body-wrap\">\n                      <header>\n                          <h1><span className=\"highlight\">ufo</span>l<span className=\"highlight\">.</span>ink</h1>\n                          <small>...free and always will be.</small>\n                      </header>\n                      <main>\n                          <form onSubmit={this.handleSubmit}>\n                              <fieldset>\n                                  <input type=\"text\" name=\"url\" placeholder=\"Enter URL including the http(s) protocol\" onChange={this.handleChange}/>\n                                  <input type=\"submit\" value=\"shorten\"/>\n                              </fieldset>\n                              <br />\n                              <fieldset className={this.state.link !== '' ? 'display-result' : 'hide-result'}>\n                                  <span id=\"result\">{ this.state.link }</span>\n                                  <button id=\"copy\" onClick={this.copyResult}></button>\n                              </fieldset>\n                          </form>\n                      </main>\n                  </div>\n              )} />\n              <Route path=\"/:hash\" component={Redirect} exact />\n          </div>\n        </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}